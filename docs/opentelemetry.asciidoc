[[opentelemetry]]
== OpenTelemetry API

The Elastic APM Go Agent provides wrappers to interact with the https://opentelemetry.io/[OpenTelemetry API].

Metrics created through the OpenTelemetry API will be translated to Elastic APM metrics.

[float]
[[opentelemetry-init]]
=== Initializing the metrics exporter

The OpenTelemetry Metrics bridge is implemented as a manual reader exporter.
The Elastic APM Agent will regularly ask OpenTelemetry for its latest metrics,
and emit them as its own.

To initialize this exporter, you first need to import the `apmotel` package.


[source,go]
----
import (
	"go.elastic.co/apm/module/apmotel"
)
----

The apmotel package exposes a `NewGatherer` method, which returns an implementation of both an https://pkg.go.dev/github.com/elastic/apm-agent-go#MetricsGatherer[Elastic MetricsGatherer], and an https://pkg.go.dev/go.opentelemetry.io/otel/sdk/metric#Reader[OpenTelemetry metric.Reader].

[source,go]
----
exporter := apmotel.NewGatherer()
----

The method allows passing some options, such as `WithAggregationSelector`, to
specify a custom OpenTelemetry aggregation selector.

Once you have obtained this exporter, you can configure the OpenTelemetry SDK
so it reports emitted metrics, as well as the Elastic Agent to read those
metrics.


[source,go]
----
import (
	"go.elastic.co/apm"
	"go.elastic.co/apm/module/apmotel"

	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/sdk/metric"
)

func main() {
	exporter := apmotel.NewGatherer()

	// Configure OpenTelemetry
	provider := metric.NewMeterProvider(metric.WithReader(exporter))
	otel.SetMeterProvider(provider)

	// Configure the Elastic APM
	apm.DefaultTracer().RegisterMetricsGatherer(exporter)

	// Record a metric with OpenTelemetry which will be exported to the Elastic Agent
	meter := provider.Meter("my_application")
	counter, _ := meter.Float64Counter("metric_called")
	counter.Add(context.TODO(), 1)
}
----
